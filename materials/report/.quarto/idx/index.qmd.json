{"title":"Исследование повторяемости ветров в южной части Российской Федерации","markdown":{"yaml":{"title":"Исследование повторяемости ветров в южной части Российской Федерации","format":"html","date":"today","author":"А.А. Автор","lang":"ru","code-fold":true,"toc":true,"number-sections":false,"highlight-style":"a11y"},"headingText":"Замечание","containsRefs":false,"markdown":"\n\n::: callout-tip\n\nДанный документ создан на [языке программирования R](https://www.r-project.org/) с помощью воспроизводимых вычислений и опубликован на основе издательской системы [Quarto](https://quarto.org/) версии `r system(\"quarto --version\", intern = TRUE)` на сервисе [Netlify](https://netlify.app/). При изменении исходных данных, документ автоматически будет сгенерирован с учетом изменений.\n:::\n\n## Исходные данные\n\nЗагрузим необходимые библиотеки языка программирования R.\n\n```{r}\n#| message: false\n# общие библиотеки\nlibrary(tidyverse)\nlibrary(magrittr)\n# работа внутри директорий\nlibrary(here)\n\n# библиотеки для работы с географическими данными\nlibrary(raster)\nlibrary(marmap)\nlibrary(elevatr)\nlibrary(sp)\nlibrary(sf)\nlibrary(terra)\n```\n\nЗагрузим табличные данные.\n\n```{r}\n#| message: false\ndata_path <- here(\"data\")\ndata_table_path <- here(data_path, \"wind_2021.csv\")\n\nwind_2021_raw <- read_csv(data_table_path)\n\nwind_2021 <- wind_2021_raw\n\n# правильные типы данных\nwind_2021$lon %<>% as.numeric()\nwind_2021$lat %<>% as.numeric()\n\n# месяцы как факторы (упорядочивание)\nwind_2021$month <- factor(wind_2021$month,\n  labels = c(\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\"\n  ),\n  levels = c(\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\"\n  )\n)\n```\n\nПосмотрим на структуру исходных табличных данных. Здесь:\n\n| переменная   | значение                                         |\n|--------------|--------------------------------------------------|\n| `lat`        | широта точки                                     |\n| `lon`        | долгота                                          |\n| `wind_value` | повторяемость ветра в 2021 г. (количество часов) |\n| `year`       | год                                              |\n| `month`      | месяц                                            |\n\nДанные представляют собой объединенную таблицу, в которой каждая строка соответствует одному наблюдению, а названия столбцов -- переменным.[^1] Такие данные удобно преобразовывать и использовать в дальнейшем для графиков.\n\n[^1]: Желательно всегда представлять данные именно в таком виде.\n\n```{r}\nwind_2021\n```\n\nРассмотрим изменения основной величины `wind_value` для различных месяцев на гистограммах ниже.\n\n```{r}\n#| message: false\n#| fig-height: 5\n#| fig-width: 7\n#| fig-cap: \"Гистограммы, показывающие по месяцам количество наблюдений с различной длительностью в часах ветров со скоростью $v$ > 7 м/с (южная часть РФ, 2021 год)\"\n#| label: fig-histogram_2021\n\nwind_2021 %>% \n  ggplot(aes(x = wind_value, fill = month)) + \n  geom_histogram(alpha = 0.9, binwidth = 15) +\n  labs(fill = \"месяц\", \n       x = \"количество часов\",\n       y = \"количество наблюдений\\n\")  +\n  scale_y_continuous(labels = function(x) format(x, big.mark = \" \",\n                                                 scientific = FALSE)) +\n  theme_bw() +\n  facet_wrap(~month, ncol = 2) +\n  theme(legend.position = \"none\",\n        plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n        legend.title = element_text(size = rel(1.1)),\n        legend.text = element_text(size = rel(1.1)))\n```\n\n## Картографическая основа\n\nВсе карты (как векторные, так и растровые) и объекты на картах строятся с учетом [картографической проекции](https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%86%D0%B8%D0%B9), в нашем случае это проекция [EPSG:4326](https://epsg.io/4326). Кроме того, для геометрического упрощения границ и ускорения вычислений, заранее была выполнена [генерализация картографической основы](https://tsamsonov.github.io/r-geo-course/maps.html#%D0%B3%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B9-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D1%8B).\n\nИнтересующая нас область представляет собой прямоугольник, градусные меры широт которого варьируются от `r format(min(wind_2021$lat), decimal.mark = \",\")` до `r format(max(wind_2021$lat), decimal.mark = \",\")` и для долготы от `r format(min(wind_2021$lon), decimal.mark = \",\")` до `r format(max(wind_2021$lon), decimal.mark = \",\")`.\n\nЗагрузим (упрощенные границы) Российской Федерации.\n\n```{r}\n#| message: false\n#| warning: false\nRussia_map_path <- here(data_path, \"boundary_Russia_regions_simplified.shp\")\nRussia_regions_boundary <- st_read(Russia_map_path)\n\nRussia_regions_boundary <-\n  Russia_regions_boundary[order(Russia_regions_boundary$names_new), ]\n```\n\nИзобразим полную карту РФ по регионам.\n\n```{r}\n#| warning: false\n#| fig-cap: \"Карта границ регионов РФ с учетом упрощений\"\n#| label: fig-RF_map\nggplot() +\n  geom_sf(data = Russia_regions_boundary, \n          aes(fill = names_new),\n          alpha = 0.8) +\n  theme_void() +\n  theme(legend.position = \"none\") +\n  coord_sf(xlim = c(25, 180), \n           ylim = c(41.18587, 82.05862))\n```\n\nОграничим карту регионов только на исследуемую прямоугольную область. Здесь цвет соответствует номеру региона.\n\n```{r}\n#| warning: false\n#| fig-width: 8\n#| fig-height: 3.5\n#| fig-cap: \"Карта границ регионов РФ в пределах исследуемой области\"\n#| label: fig-crop_map\n\nRussia_regions_crop <- st_crop(Russia_regions_boundary,\n  xmin = min(wind_2021$lon),\n  ymin = min(wind_2021$lat),\n  xmax = max(wind_2021$lon),\n  ymax = max(wind_2021$lat)\n)\n\nRussia_regions_crop <- Russia_regions_crop %>% \n  mutate(id = row_number())\n\nggplot() +\n  geom_sf(data = Russia_regions_crop,\n          aes(fill = id), alpha = 0.8) +\n  ggrepel::geom_label_repel(\n    data = Russia_regions_crop,\n    aes(label = id, geometry = geometry),\n    stat = \"sf_coordinates\",\n    min.segment.length = 0,\n    alpha = 0.7\n  ) +\n  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), \n           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),\n           expand = FALSE) +\n  labs(x = \"\", y = \"\") +\n  theme(legend.position = \"none\") +\n  viridis::scale_fill_viridis(option = \"turbo\") +\n  theme(plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n        legend.title = element_text(size = rel(1.1)),\n        legend.text = element_text(size = rel(1.1)))\n```\n\n::: callout-note\n## Замечание\n\nЯзык R позволяет строить график послойно, настраивать прозрачность слоев, добавлять различные элементы, и т.д.\n:::\n\n## Растровые карты\n\nДля отображения данных можно воспользоваться растровыми картами с непрерывными палитрами. Ниже показан пример наблюдений июня 2021 года.\n\n```{r}\n#| code-fold: false\n# функция, необходимая для переопределения \n# средней точки цветовой палитры\n\nmid_rescaler <- function(mid = 0) {  # <1>\n  function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {\n    scales::rescale_mid(x, to, from, mid)\n  }\n}\n```\n\n1. В коде выше функция `mid_rescaler` -- аргумент средней точки в `scale_*` ([источник](https://github.com/tidyverse/ggplot2/issues/3738)).\n\n```{r}\n#| warning: false\n#| fig-width: 8\n#| fig-height: 4.5\n#| fig-cap: \"Растровая карта наблюдений ветров в июне 2021 года с учетом интерполяции\"\n#| label: fig-raster_june_2021\n\nlibrary(paletteer)\n\nggplot() +\n  geom_raster(data = wind_2021 %>% dplyr::filter(month == \"июнь\"), \n              aes(x = lon, y = lat, fill = wind_value), \n              alpha = 0.9, interpolate = TRUE) +\n  geom_sf(data = Russia_regions_crop, color = \"black\",\n          alpha = 0.01,\n          linewidth = 0.4) +\n  ggrepel::geom_label_repel(\n    data = Russia_regions_crop,\n    aes(label = id, geometry = geometry),\n    stat = \"sf_coordinates\",\n    min.segment.length = 0,\n    alpha = 0.7\n  ) +\n  scale_fill_paletteer_c(\"grDevices::RdYlBu\", \n                         na.value = NA, \n                         rescaler = mid_rescaler(mid = \n                                    median(wind_2021$wind_value) + 100),\n                         breaks = c(0, 100, 200, 300),\n                         labels = c(\"0 ч\", \"100 ч\", \"200 ч\", \"300 ч\"),\n                         direction = -1) +\n  hrbrthemes::theme_ipsum() +\n  labs(x = \"\", y = \"\",\n       fill = \"количество часов\") +\n  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), \n           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),\n           expand = FALSE) +\n  guides(fill = guide_colorbar(title.position = 'top', \n                               title.hjust = 0.5,\n                               barwidth = unit(15, 'lines'), \n                               barheight = unit(0.7, 'lines'))) +\n  theme(legend.position = \"bottom\",\n    plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n    legend.title = element_text(size = rel(1.1)),\n    legend.text = element_text(size = rel(1.1))\n  )\n```\n\n\n## Карта высот над уровнем моря\n\nЗагрузим и визуализируем данные высот над уровнем моря, которые понадобятся нам для дальнейшего использования.\n\n```{r}\n#| message: false\n\n# географическая проекция\nprojection <- \"EPSG:4326\"\n\n# получение данных по высотам\nelevation_df <- get_elev_raster(wind_2021 %>% \n                                  dplyr::select(lon, lat) %>% \n                                  rename(x = lon, y = lat) %>% \n                                  na.omit() %>% \n                                  as.data.frame(), \n                                prj = projection, \n                                # z = разрешение\n                                z = 5)\n```\n\nИз растровых данных легко сделать таблицу высот. Здесь $x$ и $y$ соответствуют координатам, а $z$ -- высотам над уровнем моря.\n\n```{r}\n#| message: false\n#| warning: false\nelevation_tibble <- as.data.frame(elevation_df, xy = TRUE) \nelevation_tibble %<>% as_tibble()\nnames(elevation_tibble)[3] <- \"z\"\n\nelevation_tibble\n```\n\nПокажем растровое изображение высот над уровнем моря для исследуемой области.\n\n```{r}\n#| fig-width: 8\n#| fig-height: 3\n#| message: false\n#| warning: false\n#| fig-cap: \"Растровая карта высот для исследуемой области\"\n#| label: fig-raster_terrain_scale_fill_etopo\n\nggplot() +\n  geom_raster(data = elevation_tibble, \n              aes(x = x, y = y, fill = z)) +\n  geom_sf(data = Russia_regions_boundary, color = \"black\",\n          alpha = 0.1) +\n  ggrepel::geom_label_repel(\n    data = Russia_regions_crop,\n    aes(label = id, geometry = geometry),\n    stat = \"sf_coordinates\",\n    min.segment.length = 0,\n    alpha = 0.7\n  ) +\n  scale_fill_etopo() +\n  hrbrthemes::theme_ipsum() +\n  labs(fill = \"высота, м.:\\n\", x = \"\", y = \"\") +\n  theme(legend.key.height = unit(1, 'cm')) +\n  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), \n           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),\n           expand = FALSE) +\n  theme(plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n        legend.title = element_text(size = rel(1.1)),\n        legend.text = element_text(size = rel(1.1)))\n```\n\n\n## Техническая информация\n\nЗдесь указана информация о сессии и загруженных библиотеках языка R.\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n```{r}\n#| message: false\n#| echo: false\nsessioninfo::session_info()\n```\n:::\n","srcMarkdownNoYaml":"\n\n::: callout-tip\n## Замечание\n\nДанный документ создан на [языке программирования R](https://www.r-project.org/) с помощью воспроизводимых вычислений и опубликован на основе издательской системы [Quarto](https://quarto.org/) версии `r system(\"quarto --version\", intern = TRUE)` на сервисе [Netlify](https://netlify.app/). При изменении исходных данных, документ автоматически будет сгенерирован с учетом изменений.\n:::\n\n## Исходные данные\n\nЗагрузим необходимые библиотеки языка программирования R.\n\n```{r}\n#| message: false\n# общие библиотеки\nlibrary(tidyverse)\nlibrary(magrittr)\n# работа внутри директорий\nlibrary(here)\n\n# библиотеки для работы с географическими данными\nlibrary(raster)\nlibrary(marmap)\nlibrary(elevatr)\nlibrary(sp)\nlibrary(sf)\nlibrary(terra)\n```\n\nЗагрузим табличные данные.\n\n```{r}\n#| message: false\ndata_path <- here(\"data\")\ndata_table_path <- here(data_path, \"wind_2021.csv\")\n\nwind_2021_raw <- read_csv(data_table_path)\n\nwind_2021 <- wind_2021_raw\n\n# правильные типы данных\nwind_2021$lon %<>% as.numeric()\nwind_2021$lat %<>% as.numeric()\n\n# месяцы как факторы (упорядочивание)\nwind_2021$month <- factor(wind_2021$month,\n  labels = c(\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\"\n  ),\n  levels = c(\n    \"апрель\",\n    \"май\",\n    \"июнь\",\n    \"июль\"\n  )\n)\n```\n\nПосмотрим на структуру исходных табличных данных. Здесь:\n\n| переменная   | значение                                         |\n|--------------|--------------------------------------------------|\n| `lat`        | широта точки                                     |\n| `lon`        | долгота                                          |\n| `wind_value` | повторяемость ветра в 2021 г. (количество часов) |\n| `year`       | год                                              |\n| `month`      | месяц                                            |\n\nДанные представляют собой объединенную таблицу, в которой каждая строка соответствует одному наблюдению, а названия столбцов -- переменным.[^1] Такие данные удобно преобразовывать и использовать в дальнейшем для графиков.\n\n[^1]: Желательно всегда представлять данные именно в таком виде.\n\n```{r}\nwind_2021\n```\n\nРассмотрим изменения основной величины `wind_value` для различных месяцев на гистограммах ниже.\n\n```{r}\n#| message: false\n#| fig-height: 5\n#| fig-width: 7\n#| fig-cap: \"Гистограммы, показывающие по месяцам количество наблюдений с различной длительностью в часах ветров со скоростью $v$ > 7 м/с (южная часть РФ, 2021 год)\"\n#| label: fig-histogram_2021\n\nwind_2021 %>% \n  ggplot(aes(x = wind_value, fill = month)) + \n  geom_histogram(alpha = 0.9, binwidth = 15) +\n  labs(fill = \"месяц\", \n       x = \"количество часов\",\n       y = \"количество наблюдений\\n\")  +\n  scale_y_continuous(labels = function(x) format(x, big.mark = \" \",\n                                                 scientific = FALSE)) +\n  theme_bw() +\n  facet_wrap(~month, ncol = 2) +\n  theme(legend.position = \"none\",\n        plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n        legend.title = element_text(size = rel(1.1)),\n        legend.text = element_text(size = rel(1.1)))\n```\n\n## Картографическая основа\n\nВсе карты (как векторные, так и растровые) и объекты на картах строятся с учетом [картографической проекции](https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%86%D0%B8%D0%B9), в нашем случае это проекция [EPSG:4326](https://epsg.io/4326). Кроме того, для геометрического упрощения границ и ускорения вычислений, заранее была выполнена [генерализация картографической основы](https://tsamsonov.github.io/r-geo-course/maps.html#%D0%B3%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B9-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D1%8B).\n\nИнтересующая нас область представляет собой прямоугольник, градусные меры широт которого варьируются от `r format(min(wind_2021$lat), decimal.mark = \",\")` до `r format(max(wind_2021$lat), decimal.mark = \",\")` и для долготы от `r format(min(wind_2021$lon), decimal.mark = \",\")` до `r format(max(wind_2021$lon), decimal.mark = \",\")`.\n\nЗагрузим (упрощенные границы) Российской Федерации.\n\n```{r}\n#| message: false\n#| warning: false\nRussia_map_path <- here(data_path, \"boundary_Russia_regions_simplified.shp\")\nRussia_regions_boundary <- st_read(Russia_map_path)\n\nRussia_regions_boundary <-\n  Russia_regions_boundary[order(Russia_regions_boundary$names_new), ]\n```\n\nИзобразим полную карту РФ по регионам.\n\n```{r}\n#| warning: false\n#| fig-cap: \"Карта границ регионов РФ с учетом упрощений\"\n#| label: fig-RF_map\nggplot() +\n  geom_sf(data = Russia_regions_boundary, \n          aes(fill = names_new),\n          alpha = 0.8) +\n  theme_void() +\n  theme(legend.position = \"none\") +\n  coord_sf(xlim = c(25, 180), \n           ylim = c(41.18587, 82.05862))\n```\n\nОграничим карту регионов только на исследуемую прямоугольную область. Здесь цвет соответствует номеру региона.\n\n```{r}\n#| warning: false\n#| fig-width: 8\n#| fig-height: 3.5\n#| fig-cap: \"Карта границ регионов РФ в пределах исследуемой области\"\n#| label: fig-crop_map\n\nRussia_regions_crop <- st_crop(Russia_regions_boundary,\n  xmin = min(wind_2021$lon),\n  ymin = min(wind_2021$lat),\n  xmax = max(wind_2021$lon),\n  ymax = max(wind_2021$lat)\n)\n\nRussia_regions_crop <- Russia_regions_crop %>% \n  mutate(id = row_number())\n\nggplot() +\n  geom_sf(data = Russia_regions_crop,\n          aes(fill = id), alpha = 0.8) +\n  ggrepel::geom_label_repel(\n    data = Russia_regions_crop,\n    aes(label = id, geometry = geometry),\n    stat = \"sf_coordinates\",\n    min.segment.length = 0,\n    alpha = 0.7\n  ) +\n  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), \n           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),\n           expand = FALSE) +\n  labs(x = \"\", y = \"\") +\n  theme(legend.position = \"none\") +\n  viridis::scale_fill_viridis(option = \"turbo\") +\n  theme(plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n        legend.title = element_text(size = rel(1.1)),\n        legend.text = element_text(size = rel(1.1)))\n```\n\n::: callout-note\n## Замечание\n\nЯзык R позволяет строить график послойно, настраивать прозрачность слоев, добавлять различные элементы, и т.д.\n:::\n\n## Растровые карты\n\nДля отображения данных можно воспользоваться растровыми картами с непрерывными палитрами. Ниже показан пример наблюдений июня 2021 года.\n\n```{r}\n#| code-fold: false\n# функция, необходимая для переопределения \n# средней точки цветовой палитры\n\nmid_rescaler <- function(mid = 0) {  # <1>\n  function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {\n    scales::rescale_mid(x, to, from, mid)\n  }\n}\n```\n\n1. В коде выше функция `mid_rescaler` -- аргумент средней точки в `scale_*` ([источник](https://github.com/tidyverse/ggplot2/issues/3738)).\n\n```{r}\n#| warning: false\n#| fig-width: 8\n#| fig-height: 4.5\n#| fig-cap: \"Растровая карта наблюдений ветров в июне 2021 года с учетом интерполяции\"\n#| label: fig-raster_june_2021\n\nlibrary(paletteer)\n\nggplot() +\n  geom_raster(data = wind_2021 %>% dplyr::filter(month == \"июнь\"), \n              aes(x = lon, y = lat, fill = wind_value), \n              alpha = 0.9, interpolate = TRUE) +\n  geom_sf(data = Russia_regions_crop, color = \"black\",\n          alpha = 0.01,\n          linewidth = 0.4) +\n  ggrepel::geom_label_repel(\n    data = Russia_regions_crop,\n    aes(label = id, geometry = geometry),\n    stat = \"sf_coordinates\",\n    min.segment.length = 0,\n    alpha = 0.7\n  ) +\n  scale_fill_paletteer_c(\"grDevices::RdYlBu\", \n                         na.value = NA, \n                         rescaler = mid_rescaler(mid = \n                                    median(wind_2021$wind_value) + 100),\n                         breaks = c(0, 100, 200, 300),\n                         labels = c(\"0 ч\", \"100 ч\", \"200 ч\", \"300 ч\"),\n                         direction = -1) +\n  hrbrthemes::theme_ipsum() +\n  labs(x = \"\", y = \"\",\n       fill = \"количество часов\") +\n  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), \n           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),\n           expand = FALSE) +\n  guides(fill = guide_colorbar(title.position = 'top', \n                               title.hjust = 0.5,\n                               barwidth = unit(15, 'lines'), \n                               barheight = unit(0.7, 'lines'))) +\n  theme(legend.position = \"bottom\",\n    plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n    legend.title = element_text(size = rel(1.1)),\n    legend.text = element_text(size = rel(1.1))\n  )\n```\n\n\n## Карта высот над уровнем моря\n\nЗагрузим и визуализируем данные высот над уровнем моря, которые понадобятся нам для дальнейшего использования.\n\n```{r}\n#| message: false\n\n# географическая проекция\nprojection <- \"EPSG:4326\"\n\n# получение данных по высотам\nelevation_df <- get_elev_raster(wind_2021 %>% \n                                  dplyr::select(lon, lat) %>% \n                                  rename(x = lon, y = lat) %>% \n                                  na.omit() %>% \n                                  as.data.frame(), \n                                prj = projection, \n                                # z = разрешение\n                                z = 5)\n```\n\nИз растровых данных легко сделать таблицу высот. Здесь $x$ и $y$ соответствуют координатам, а $z$ -- высотам над уровнем моря.\n\n```{r}\n#| message: false\n#| warning: false\nelevation_tibble <- as.data.frame(elevation_df, xy = TRUE) \nelevation_tibble %<>% as_tibble()\nnames(elevation_tibble)[3] <- \"z\"\n\nelevation_tibble\n```\n\nПокажем растровое изображение высот над уровнем моря для исследуемой области.\n\n```{r}\n#| fig-width: 8\n#| fig-height: 3\n#| message: false\n#| warning: false\n#| fig-cap: \"Растровая карта высот для исследуемой области\"\n#| label: fig-raster_terrain_scale_fill_etopo\n\nggplot() +\n  geom_raster(data = elevation_tibble, \n              aes(x = x, y = y, fill = z)) +\n  geom_sf(data = Russia_regions_boundary, color = \"black\",\n          alpha = 0.1) +\n  ggrepel::geom_label_repel(\n    data = Russia_regions_crop,\n    aes(label = id, geometry = geometry),\n    stat = \"sf_coordinates\",\n    min.segment.length = 0,\n    alpha = 0.7\n  ) +\n  scale_fill_etopo() +\n  hrbrthemes::theme_ipsum() +\n  labs(fill = \"высота, м.:\\n\", x = \"\", y = \"\") +\n  theme(legend.key.height = unit(1, 'cm')) +\n  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), \n           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),\n           expand = FALSE) +\n  theme(plot.margin = margin(0.01, 0.01, 0.01, 0.01, \"cm\"),\n        legend.title = element_text(size = rel(1.1)),\n        legend.text = element_text(size = rel(1.1)))\n```\n\n\n## Техническая информация\n\nЗдесь указана информация о сессии и загруженных библиотеках языка R.\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n```{r}\n#| message: false\n#| echo: false\nsessioninfo::session_info()\n```\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"number-sections":false,"highlight-style":"a11y","output-file":"index.html"},"language":{},"metadata":{"lang":"ru","fig-responsive":true,"quarto-version":"1.3.228","theme":"pulse","title":"Исследование повторяемости ветров в южной части Российской Федерации","date":"today","author":"А.А. Автор"},"extensions":{"book":{"multiFile":true}}}}}