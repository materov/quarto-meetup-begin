---
title: "Исследование повторяемости ветров в южной части Российской Федерации"
format: html
date: today
author: А.А. Автор
lang: ru
code-fold: true
toc: true
number-sections: false
highlight-style: a11y
---

::: callout-tip
## Замечание

Данный документ создан на [языке программирования R](https://www.r-project.org/) с помощью воспроизводимых вычислений и опубликован на основе издательской системы [Quarto](https://quarto.org/) версии `r system("quarto --version", intern = TRUE)` на сервисе [Netlify](https://netlify.app/). При изменении исходных данных, документ автоматически будет сгенерирован с учетом изменений.
:::

## Исходные данные

Загрузим необходимые библиотеки языка программирования R.

```{r}
#| message: false
# общие библиотеки
library(tidyverse)
library(magrittr)
# работа внутри директорий
library(here)

# библиотеки для работы с географическими данными
library(raster)
library(marmap)
library(elevatr)
library(sp)
library(sf)
library(terra)
```

Загрузим табличные данные.

```{r}
#| message: false
data_path <- here("data")
data_table_path <- here(data_path, "wind_2021.csv")

wind_2021_raw <- read_csv(data_table_path)

wind_2021 <- wind_2021_raw

# правильные типы данных
wind_2021$lon %<>% as.numeric()
wind_2021$lat %<>% as.numeric()

# месяцы как факторы (упорядочивание)
wind_2021$month <- factor(wind_2021$month,
  labels = c(
    "апрель",
    "май",
    "июнь",
    "июль"
  ),
  levels = c(
    "апрель",
    "май",
    "июнь",
    "июль"
  )
)
```

Посмотрим на структуру исходных табличных данных. Здесь:

| переменная   | значение                                         |
|--------------|--------------------------------------------------|
| `lat`        | широта точки                                     |
| `lon`        | долгота                                          |
| `wind_value` | повторяемость ветра в 2021 г. (количество часов) |
| `year`       | год                                              |
| `month`      | месяц                                            |

Данные представляют собой объединенную таблицу, в которой каждая строка соответствует одному наблюдению, а названия столбцов -- переменным.[^1] Такие данные удобно преобразовывать и использовать в дальнейшем для графиков.

[^1]: Желательно всегда представлять данные именно в таком виде.

```{r}
wind_2021
```

Рассмотрим изменения основной величины `wind_value` для различных месяцев на гистограммах ниже.

```{r}
#| message: false
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "Гистограммы, показывающие по месяцам количество наблюдений с различной длительностью в часах ветров со скоростью $v$ > 7 м/с (южная часть РФ, 2021 год)"
#| label: fig-histogram_2021

wind_2021 %>% 
  ggplot(aes(x = wind_value, fill = month)) + 
  geom_histogram(alpha = 0.9, binwidth = 15) +
  labs(fill = "месяц", 
       x = "количество часов",
       y = "количество наблюдений\n")  +
  scale_y_continuous(labels = function(x) format(x, big.mark = " ",
                                                 scientific = FALSE)) +
  theme_bw() +
  facet_wrap(~month, ncol = 2) +
  theme(legend.position = "none",
        plot.margin = margin(0.01, 0.01, 0.01, 0.01, "cm"),
        legend.title = element_text(size = rel(1.1)),
        legend.text = element_text(size = rel(1.1)))
```

## Картографическая основа

Все карты (как векторные, так и растровые) и объекты на картах строятся с учетом [картографической проекции](https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%86%D0%B8%D0%B9), в нашем случае это проекция [EPSG:4326](https://epsg.io/4326). Кроме того, для геометрического упрощения границ и ускорения вычислений, заранее была выполнена [генерализация картографической основы](https://tsamsonov.github.io/r-geo-course/maps.html#%D0%B3%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BA%D0%B0%D1%80%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B9-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D1%8B).

Интересующая нас область представляет собой прямоугольник, градусные меры широт которого варьируются от `r format(min(wind_2021$lat), decimal.mark = ",")` до `r format(max(wind_2021$lat), decimal.mark = ",")` и для долготы от `r format(min(wind_2021$lon), decimal.mark = ",")` до `r format(max(wind_2021$lon), decimal.mark = ",")`.

Загрузим (упрощенные границы) Российской Федерации.

```{r}
#| message: false
#| warning: false
Russia_map_path <- here(data_path, "boundary_Russia_regions_simplified.shp")
Russia_regions_boundary <- st_read(Russia_map_path)

Russia_regions_boundary <-
  Russia_regions_boundary[order(Russia_regions_boundary$names_new), ]
```

Изобразим полную карту РФ по регионам.

```{r}
#| warning: false
#| fig-cap: "Карта границ регионов РФ с учетом упрощений"
#| label: fig-RF_map
ggplot() +
  geom_sf(data = Russia_regions_boundary, 
          aes(fill = names_new),
          alpha = 0.8) +
  theme_void() +
  theme(legend.position = "none") +
  coord_sf(xlim = c(25, 180), 
           ylim = c(41.18587, 82.05862))
```

Ограничим карту регионов только на исследуемую прямоугольную область. Здесь цвет соответствует номеру региона.

```{r}
#| warning: false
#| fig-width: 8
#| fig-height: 3.5
#| fig-cap: "Карта границ регионов РФ в пределах исследуемой области"
#| label: fig-crop_map

Russia_regions_crop <- st_crop(Russia_regions_boundary,
  xmin = min(wind_2021$lon),
  ymin = min(wind_2021$lat),
  xmax = max(wind_2021$lon),
  ymax = max(wind_2021$lat)
)

Russia_regions_crop <- Russia_regions_crop %>% 
  mutate(id = row_number())

ggplot() +
  geom_sf(data = Russia_regions_crop,
          aes(fill = id), alpha = 0.8) +
  ggrepel::geom_label_repel(
    data = Russia_regions_crop,
    aes(label = id, geometry = geometry),
    stat = "sf_coordinates",
    min.segment.length = 0,
    alpha = 0.7
  ) +
  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), 
           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),
           expand = FALSE) +
  labs(x = "", y = "") +
  theme(legend.position = "none") +
  viridis::scale_fill_viridis(option = "turbo") +
  theme(plot.margin = margin(0.01, 0.01, 0.01, 0.01, "cm"),
        legend.title = element_text(size = rel(1.1)),
        legend.text = element_text(size = rel(1.1)))
```

::: callout-note
## Замечание

Язык R позволяет строить график послойно, настраивать прозрачность слоев, добавлять различные элементы, и т.д.
:::

## Растровые карты

Для отображения данных можно воспользоваться растровыми картами с непрерывными палитрами. Ниже показан пример наблюдений июня 2021 года.

```{r}
#| code-fold: false
# функция, необходимая для переопределения 
# средней точки цветовой палитры

mid_rescaler <- function(mid = 0) {  # <1>
  function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {
    scales::rescale_mid(x, to, from, mid)
  }
}
```

1. В коде выше функция `mid_rescaler` -- аргумент средней точки в `scale_*` ([источник](https://github.com/tidyverse/ggplot2/issues/3738)).

```{r}
#| warning: false
#| fig-width: 8
#| fig-height: 4.5
#| fig-cap: "Растровая карта наблюдений ветров в июне 2021 года с учетом интерполяции"
#| label: fig-raster_june_2021

library(paletteer)

ggplot() +
  geom_raster(data = wind_2021 %>% dplyr::filter(month == "июнь"), 
              aes(x = lon, y = lat, fill = wind_value), 
              alpha = 0.9, interpolate = TRUE) +
  geom_sf(data = Russia_regions_crop, color = "black",
          alpha = 0.01,
          linewidth = 0.4) +
  ggrepel::geom_label_repel(
    data = Russia_regions_crop,
    aes(label = id, geometry = geometry),
    stat = "sf_coordinates",
    min.segment.length = 0,
    alpha = 0.7
  ) +
  scale_fill_paletteer_c("grDevices::RdYlBu", 
                         na.value = NA, 
                         rescaler = mid_rescaler(mid = 
                                    median(wind_2021$wind_value) + 100),
                         breaks = c(0, 100, 200, 300),
                         labels = c("0 ч", "100 ч", "200 ч", "300 ч"),
                         direction = -1) +
  hrbrthemes::theme_ipsum() +
  labs(x = "", y = "",
       fill = "количество часов") +
  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), 
           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),
           expand = FALSE) +
  guides(fill = guide_colorbar(title.position = 'top', 
                               title.hjust = 0.5,
                               barwidth = unit(15, 'lines'), 
                               barheight = unit(0.7, 'lines'))) +
  theme(legend.position = "bottom",
    plot.margin = margin(0.01, 0.01, 0.01, 0.01, "cm"),
    legend.title = element_text(size = rel(1.1)),
    legend.text = element_text(size = rel(1.1))
  )
```


## Карта высот над уровнем моря

Загрузим и визуализируем данные высот над уровнем моря, которые понадобятся нам для дальнейшего использования.

```{r}
#| message: false

# географическая проекция
projection <- "EPSG:4326"

# получение данных по высотам
elevation_df <- get_elev_raster(wind_2021 %>% 
                                  dplyr::select(lon, lat) %>% 
                                  rename(x = lon, y = lat) %>% 
                                  na.omit() %>% 
                                  as.data.frame(), 
                                prj = projection, 
                                # z = разрешение
                                z = 5)
```

Из растровых данных легко сделать таблицу высот. Здесь $x$ и $y$ соответствуют координатам, а $z$ -- высотам над уровнем моря.

```{r}
#| message: false
#| warning: false
elevation_tibble <- as.data.frame(elevation_df, xy = TRUE) 
elevation_tibble %<>% as_tibble()
names(elevation_tibble)[3] <- "z"

elevation_tibble
```

Покажем растровое изображение высот над уровнем моря для исследуемой области.

```{r}
#| fig-width: 8
#| fig-height: 3
#| message: false
#| warning: false
#| fig-cap: "Растровая карта высот для исследуемой области"
#| label: fig-raster_terrain_scale_fill_etopo

ggplot() +
  geom_raster(data = elevation_tibble, 
              aes(x = x, y = y, fill = z)) +
  geom_sf(data = Russia_regions_boundary, color = "black",
          alpha = 0.1) +
  ggrepel::geom_label_repel(
    data = Russia_regions_crop,
    aes(label = id, geometry = geometry),
    stat = "sf_coordinates",
    min.segment.length = 0,
    alpha = 0.7
  ) +
  scale_fill_etopo() +
  hrbrthemes::theme_ipsum() +
  labs(fill = "высота, м.:\n", x = "", y = "") +
  theme(legend.key.height = unit(1, 'cm')) +
  coord_sf(xlim = c(min(wind_2021$lon), max(wind_2021$lon)), 
           ylim = c(min(wind_2021$lat), max(wind_2021$lat)),
           expand = FALSE) +
  theme(plot.margin = margin(0.01, 0.01, 0.01, 0.01, "cm"),
        legend.title = element_text(size = rel(1.1)),
        legend.text = element_text(size = rel(1.1)))
```


## Техническая информация

Здесь указана информация о сессии и загруженных библиотеках языка R.

::: {.callout-note collapse="true" icon="false"}
## Session Info

```{r}
#| message: false
#| echo: false
sessioninfo::session_info()
```
:::
